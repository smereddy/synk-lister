'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { AlertCircle, CheckCircle2 } from 'lucide-react';

export default function SnykVulnerabilityChecker() {
  const [orgId, setOrgId] = useState('');
  const [apiToken, setApiToken] = useState('');
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const fetchVulnerabilities = async () => {
    setLoading(true);
    setError('');
    setVulnerabilities([]);
    try {
      const response = await fetch('/api/snyk-vulnerabilities', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ orgId, apiToken }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || `HTTP error! status: ${response.status}`);
      }

      if (data.error) {
        throw new Error(data.error);
      }

      setVulnerabilities(data.vulnerabilities);
    } catch (err) {
      console.error('Error fetching vulnerabilities:', err);
      setError(getErrorMessage(err));
    } finally {
      setLoading(false);
    }
  };

  const getErrorMessage = (error: unknown): string => {
    if (error instanceof Error) return error.message;
    return String(error);
  };

  return (
    <div className="space-y-4">
      <div className="flex space-x-2">
        <Input
          placeholder="Snyk Organization ID"
          value={orgId}
          onChange={(e) => setOrgId(e.target.value)}
        />
        <Input
          type="password"
          placeholder="Snyk API Token"
          value={apiToken}
          onChange={(e) => setApiToken(e.target.value)}
        />
        <Button onClick={fetchVulnerabilities} disabled={loading}>
          {loading ? 'Fetching...' : 'Fetch Vulnerabilities'}
        </Button>
      </div>

      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {vulnerabilities.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Vulnerabilities Found</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-4">
              {vulnerabilities.map((vuln, index) => (
                <li key={index} className="border-b pb-4 last:border-b-0">
                  <h3 className="font-semibold text-lg">{vuln.title}</h3>
                  <p className="text-sm text-gray-600 mb-2">{vuln.description}</p>
                  <div className="grid grid-cols-2 gap-2 text-sm">
                    <div><span className="font-medium">Severity:</span> {vuln.severity}</div>
                    <div><span className="font-medium">Product:</span> {vuln.product}</div>
                    <div><span className="font-medium">Project:</span> {vuln.projectName}</div>
                    <div><span className="font-medium">Package:</span> {vuln.packageName}</div>
                    <div><span className="font-medium">Version:</span> {vuln.version}</div>
                    <div><span className="font-medium">Exploit Maturity:</span> {vuln.exploitMaturity}</div>
                  </div>
                  <div className="mt-2">
                    <h4 className="font-medium">Fix Information:</h4>
                    <pre className="bg-gray-100 p-2 rounded block whitespace-pre-wrap text-sm">{vuln.fixInfo}</pre>
                  </div>
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>
      )}

      {vulnerabilities.length === 0 && !loading && !error && (
        <Alert>
          <CheckCircle2 className="h-4 w-4" />
          <AlertTitle>No Vulnerabilities</AlertTitle>
          <AlertDescription>No vulnerabilities found for the given organization.</AlertDescription>
        </Alert>
      )}
    </div>
  );
}